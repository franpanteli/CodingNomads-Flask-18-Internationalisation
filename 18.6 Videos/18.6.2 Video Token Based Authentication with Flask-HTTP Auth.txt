-> modifying the user model for authentication  
    -> to implement authentication in your api, the first step is to modify the `user` model to handle authentication tokens  
    -> at the bottom of the user model class, make the necessary adjustments to accommodate authentication token generation and validation  
    -> token generation for the api is almost identical to the confirmation token generation. the key difference is that the token data will contain the user's `id` rather than a `confirm_id`, which is used in confirmation tokens  
      - this distinction ensures that the generated token is specific to the user and can be used for api authentication purposes  
    -> example of creating a token with the user’s id:  
      ```python  
      import jwt  
      from datetime import datetime, timedelta  
      from yourapp import app  
      
      class User(db.Model):  
          # user model details  
      
          def generate_auth_token(self, expiration=600):  
              """  
              generates an authentication token containing the user's id  
              the default expiration time for the token is 600 seconds (10 minutes)  
              """  
              payload = {  
                  'id': self.id,  
                  'exp': datetime.utcnow() + timedelta(seconds=expiration)  
              }  
              return jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')  
      ```  

-> validating the authentication token  
    -> now, the user model needs a method to validate the authentication token  
    -> create a method to verify the token, decoding it and checking whether it is valid and corresponds to an existing user  
    -> if the token is successfully decoded and the data matches, return the `user` object; otherwise, return `none` to signify that the token is invalid  
    -> example of validating the authentication token:  
      ```python  
      class User(db.Model):  
          # user model details  
      
          @staticmethod  
          def verify_auth_token(token):  
              """  
              verifies the authenticity of the token by decoding it.  
              if the token is valid, returns the associated user.  
              """  
              try:  
                  payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])  
                  user = User.query.get(payload['id'])  
                  return user if user else None  
              except jwt.ExpiredSignatureError:  
                  return None  
              except jwt.InvalidTokenError:  
                  return None  
      ```  

-> updating the `verify_password` function  
    -> the next step is to modify the `verify_password` function in `authentication.py` to handle cases where users may authenticate using either a password or a token  
    -> when a user submits a request with a token instead of a password, this function should be able to detect that and authenticate the user using the token alone  
    -> the function should check for a token in the request. if the token is provided and valid, the function should authenticate the user using the token, allowing the password to be skipped  
    -> if no token is provided, the function should fall back to verifying the password as usual  
    -> example of the `verify_password` function with token validation:  
      ```python  
      from flask_httpauth import HTTPBasicAuth  
      from yourapp import app  
      
      auth = HTTPBasicAuth()  
      
      @auth.verify_password  
      def verify_password(email_or_token, password):  
          """  
          verifies the user's credentials. if a token is provided, validate it.  
          if not, authenticate the user with the email and password combination.  
          """  
          # check if the email_or_token is actually a token  
          user = User.verify_auth_token(email_or_token)  
          if user:  
              return user  
      
          # otherwise, verify with email and password  
          user = User.query.filter_by(email=email_or_token).first()  
          if user and user.verify_password(password):  
              return user  
          return None  
      ```  

-> protecting api routes with authentication  
    -> with the changes to the `verify_password` function, the api routes now need protection to ensure that only authenticated users can access them  
    -> create a new view function where users can request an authentication token. this view should ensure the user is anonymous before generating the token, meaning the user has not already logged in or authenticated  
    -> protect all api routes by using the `before_request` decorator in your api blueprint. this ensures that any unauthenticated users are blocked from accessing any route unless they provide valid credentials (e.g., a token or password)  
    -> additionally, use the `login_required` decorator on routes that should only be accessible to authenticated users. this decorator will prevent access to unauthenticated users  
    -> example of protecting api routes with the `before_request` and `login_required` decorators:  
      ```python  
      from flask import Blueprint, jsonify  
      from flask_login import login_required  
      from yourapp import api, app  
      
      @api.before_request  
      def before_request():  
          """  
          before every api request, check if the user is authenticated.  
          if not, return a 401 unauthorized response.  
          """  
          if not current_user.is_authenticated:  
              return jsonify({'message': 'Unauthenticated'}), 401  
      
      @api.route('/secure_route')  
      @login_required  
      def secure_route():  
          """  
          a protected route only accessible to authenticated users.  
          """  
          return jsonify({'message': 'This is a secure route accessible to authenticated users only'})  
      ```  

-> testing the authentication token endpoint  
    -> after making the necessary updates, ensure that the flask app is running and the token endpoint is accessible  
    -> open a terminal and use an http client such as `httpie` to make a `post` request to the token generation route  
      - this request should send the user’s email and password, and the response will contain an authentication token that can be used for subsequent requests  
    example of using `httpie` to obtain an authentication token:  
    ```bash  
    http --json POST http://localhost:5000/api/token email=user@example.com password=userpassword  
    ```  
    -> the response should include a token string, which will be returned in the json response between curly braces. this token is used for authenticating the user in future requests  

-> making authenticated api requests with the token  
    -> once you have the token, you can use it to authenticate future api requests  
    -> make an authenticated request by including the token in the `authorization` header of the request  
      - the `authorization` header should follow the format `bearer <your_token>`  
    -> example of making an authenticated api request with a token:  
      ```bash  
      http --json GET http://localhost:5000/api/secure_route Authorization:"Bearer your_token"  
      ```  
    -> if the token is valid, the server will process the request and return the response. if the token is invalid, the server will return a 401 unauthorized error  

-> final thoughts  
    -> congratulations! you’ve successfully implemented user authentication for your api using tokens  
    -> this process ensures that users can authenticate through either their password or a valid token, providing flexibility for various use cases  
    -> it is essential to protect your api routes with authentication checks to prevent unauthorised access. use the appropriate decorators to enforce this security measure  
