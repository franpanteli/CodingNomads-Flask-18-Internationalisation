-> going restful: build an api lesson  
    -> lab: create an api blueprint for your flask app (5 min)  

-> introduction  
    -> focus on apis to allow programmatic access to website data  
    -> apis enable querying, adding, or editing content programmatically  
    -> rest (representational state transfer) is the architecture for building apis  

-> revisiting apis  
    -> apis provide:  
        -> access to site's content for developers or clients  
        -> programmatic operations like queries, additions, or edits  
    -> requires careful implementation with permissions, error handling, and serialisation  

-> api blueprint for your webapp  
    -> objective: implement flask app's rest api  
    -> create a blueprint to organise api-related resources  
    -> restful approach ensures stateless interactions with resources  

-> learn by doing  
    -> create and register the api blueprint  
        -> create a new directory: `app/api/`  
        -> create a blueprint file: `__init__.py`  
        -> register the blueprint with `url_prefix='/api/v1'`  
            -> use versioning (`v1`) to enable future updates without breaking older integrations  

    -> add other modules to the api blueprint  
        -> create these files within `app/api/`:  
            - `__init__.py` (blueprint creation)  
            - `authentication.py`  
            - `comments.py`  
            - `compositions.py`  
            - `decorators.py`  
            - `errors.py`  
            - `users.py`  
        -> import all files except `decorators.py` into the blueprint  

-> summary  
    -> apis allow clients to query and manipulate site content  
    -> blueprint for the api helps modularise resources  
    -> versioning via `v1` ensures forward compatibility  
    -> api structure:  
        ```  
        app/api/  
        ├── __init__.py  
        ├── authentication.py  
        ├── comments.py  
        ├── compositions.py  
        ├── decorators.py  
        ├── errors.py  
        └── users.py  
        ```  
