-> introduction to json serialisation and deserialisation for flask api  
    -> learn how to convert app data to json and vice versa for api interaction  
    -> json is used to exchange data between web clients and servers through http requests  
    -> serialisation converts app data into json to send to clients, deserialisation does the reverse  
    -> serialisation is essential for making your api functional  

-> serialising resources  
    -> data must be converted to json before sending it to api clients  
    -> models in the app's database need serialisation functions to convert to json  
    -> a json object is a dictionary containing fields with values  
    -> python dictionaries can be easily converted to json using built-in libraries  
    -> define a `to_json()` method for models to return a dictionary representation  

    -> example of a user model's to_json function  
        -> the function returns a dictionary with links to specific user resources  
        -> fields include url, username, last seen time, and compositions  
        -> compositions are represented by a count of the compositions a user has  

    -> other models to consider for serialisation  
        -> composition and comment models also need to be serialised  
        -> composition includes fields like url, release type, title, and description  
        -> comment includes url, composition url, and body content  

-> learn by doing  
    -> task: define the `to_json()` method for the composition model  
        -> map composition attributes like title, description, release type to dictionary  
        -> add url links to the relevant composition resources for clients to access  

    -> example for composition and comment models  
        -> composition attributes include release type, title, description, and artist url  
        -> comment attributes include comment url, composition url, and body content  

-> json deserialisation  
    -> clients can send json data to create new compositions  
    -> the app must validate the received json before saving to the database  
    -> create a static `from_json()` method to handle incoming data  
    -> validate essential fields like release type, title, and description before creating a composition  

    -> handling invalid data  
        -> if json data is invalid, raise a `ValidationError`  
        -> create custom exception handling for smoother error management  
        -> use an error handler to return a meaningful response instead of a 500 server error  

-> summary of serialisation and deserialisation  
    -> serialisation is the process of converting database models to json for api clients  
    -> deserialisation is the reverse process where json data is converted to models  
    -> proper handling of json data ensures smooth data exchange between clients and the api  

-> validationerror handling  
    -> a custom exception `ValidationError` is defined in `app/exceptions.py`  
    -> used to catch invalid data and return proper error responses  
    -> example of raising a `ValidationError` when critical fields are missing in the composition  

    -> api error handler for `ValidationError`  
        -> returns a `bad_request` response with the error message  
