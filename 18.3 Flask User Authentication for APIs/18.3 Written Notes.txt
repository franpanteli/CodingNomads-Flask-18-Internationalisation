-> going restful: build an api lesson  
    -> flask user authentication for apis (15 min)  

-> introduction  
    -> traditional login forms delegate authentication to flask-login through user sessions  
    -> rest apis are stateless, requiring credentials with every request to maintain rest principles  
    -> two authentication methods for apis: http authentication and token-based authentication  

-> http authentication  
    -> credentials are sent through the `authorization` request header  
    -> flask-httpauth simplifies http authentication via decorators  
    -> install flask-httpauth with: `$ pip install flask-httpauth`  
    -> example implementation:  
        -> use `@auth.verify_password` decorator to check user credentials  
        -> return a `401` status code for failed authentication using a custom error handler  
        -> store authenticated users in flask's context variable (`g.current_user`)  

-> using flask-httpauth  
    -> example callback:  
        -> verifies if credentials are valid  
        -> sets `g.current_user` and returns true if authentication succeeds  
        -> sends `401` error automatically when credentials are invalid  
    -> callback can override the default behaviour for customised error messages  

-> token authentication  
    -> tokens are safer and allow temporary authentication without requiring sensitive credentials each time  
    -> process:  
        -> client requests a token by providing credentials  
        -> api verifies credentials and returns a token  
        -> client includes the token in subsequent api requests instead of credentials  
    -> tokens have expiration dates, adding security and requiring periodic re-authentication  

-> changes to the user model  
    -> add methods to generate and verify tokens:  
        -> `generate_auth_token`: creates a token with an expiration time  
        -> `verify_auth_token`: validates the token and retrieves the associated user  

-> adding token authentication functionality  
    -> modify the `@auth.verify_password` callback to:  
        -> check if a token was provided instead of a password  
        -> validate the token using `user.verify_auth_token`  
        -> set `g.token_used` to indicate if a token was used for authentication  

-> gimme my token!  
    -> create an api endpoint to generate and return tokens:  
        -> endpoint: `/tokens/` (post request)  
        -> verifies user credentials before generating a token  
        -> returns a token and its expiration in json format  

-> protecting your app's content  
    -> use `@auth.login_required` to restrict access to api endpoints  
    -> apply `@auth.login_required` at the blueprint level using `@api.before_request`  
    -> example:  
        -> check if the authenticated userâ€™s account is confirmed  
        -> return a `403 forbidden` response for unconfirmed accounts  

-> summary: http and token authentication  
    -> http authentication requires credentials sent via the `authorization` header  
    -> flask-httpauth simplifies http authentication through decorators  
    -> token-based authentication allows for secure, temporary access with token expiration  
    -> protect api endpoints using authentication decorators and blueprint-level restrictions  