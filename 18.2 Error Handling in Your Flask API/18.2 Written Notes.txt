-> going restful: build an api lesson  
    -> error handling in your flask api (4 min)  

-> introduction  
    -> apis may encounter errors, and handling them properly is critical for usability and debugging  
    -> this lesson focuses on converting error responses into json for api clients  

-> error handling with json  
    -> current error handlers return html responses; apis should return json responses for errors  
    -> flask’s `jsonify()` function converts python dictionaries into json responses  

    -> updating the 404 error handler  
        - example code for 404 error:  
        ```python  
        from flask import jsonify, request, render_template  

        def page_not_found(e):  
            if request.accept_mimetypes.accept_json and not request.accept_mimetypes.accept_html:  
                response = jsonify({'error': 'not found'})  
                response.status_code = 404  
                return response  
            error_msg = "that page doesn't exist."  
            return render_template('error.html', error_msg=error_msg), 404  
        ```  
    -> checks the `accept` header (`request.accept_mimetypes`) to determine the client's expected response format  
    -> if json is expected, a json response is returned; otherwise, falls back to html  

-> learn by doing  
    -> task: implement the same functionality for the **500 internal server error** handler  

-> web service error handling  
    -> certain api-specific errors can be handled with custom helper functions  
        - example for a 403 forbidden error:  
        ```python  
        from flask import jsonify  

        def forbidden(message):  
            response = jsonify({'error': 'forbidden', 'message': message})  
            response.status_code = 403  
            return response  
        ```  

    -> task: create similar helper functions for:  
        - **400**: bad request  
        - **401**: unauthorized  
    -> hint: follow a similar pattern as the 403 error handler  

-> summary: restful web services and error handling  
    -> apis should handle errors gracefully and consistently, using json responses for api clients  
    -> flask’s `jsonify()` is key for converting error details into json  
    -> error handlers should differentiate between api and non-api requests based on the `accept` header  